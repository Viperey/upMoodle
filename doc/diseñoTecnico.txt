3 partes: frontend, backend, "cliente de escritorio".

Frontend: montado con tecnologias "SingleApp". Es decir, un servidor node.js con una stack tecnológico basado en Angular. Para la obtención de los datos del servidor se utilizará una comunicación tipo API/Rest, la API será privada, pero se orientará a que pudiera ser pública en algún momento dado (vía SDK).
En este punto, quitando el diseño que es mi punto más flojo, no tengo muchas dudas de ḿi capacidad de ejecución de esta parte. Ya he trabajado en un par de ocasiones en frontend y más con Angular, por tanto no supone mayor problema.
A nivel interno tendrá dos partes claramente diferenciadas, una es la estructura HTML interna como tal y la parte de manejo y puesta en pantalla de los datos a través de la API privada del sistema.

Backend. Montado sobre python. Actualmente no tengo muchos conocimientos del lenguaje, pero por lo curioseado por internet y lo que conozco de oídas, es posible montar montar todo el servidor de ficheros y sql con python sin ningún tipo de problema. El mayor desafío reside aquí, manejar el lenguaje, aprender a estructurar el proyecto y el código adecuadamente, así como aprovechar el lenguaje adecuadamente.
El mayor de los desafíos técnicos en este momento y desde el desconocimiento reside en la capacidad de almacenar los ficheros con un nombre y servirlos con otro distinto (cosas de formas normales en SQL).
En cualquier caso se dividirá en al menos los siguientes modulos diferenciados: API privada, módulo de tratamiento de ficheros y conexión con la SQL, tratamiento de sesiones. De momento esos son los grandes bloques que entreveo dentro del servidor, puede que aparezca más, que duda cabe.

El cliente de escritorio. Dado que simplemente pretende ser una funcionalidad extra y un pequeño experimento de uso de bash scripting, la idea general es configurar el servidor a nivel de SO para permitir conexiones SSH con los permisos capados.
De esta forma, a través de encadenamiento de diversos comandos de terminal bash se podría hacer una copia en disco de una asignatura completa. P.ej. UPMoodle -u usuario -s asignatura, posteriormente se introduce la constraseña y se ejecutan los distintos comandos.
A nivel técnico la idea principal es utilizar comandos tipo rsync, ssh, grep, cp, ln y alguno extra de librerías (sobre todo para parsear los datos devueltos por la API), con ellos se conseguiría conectar al servidor, descargar una copia en crudo, consultar los nombres 'verbosos' para cada fichero, renombrar y presentar el resultado.
Esta parte simplemente se plantea como una funcionalidad añadida, una curiosidad y a nivel técnico más que para mostrar un manejo de comandos bash, sirve para adquirir conocimientos de configuración de servidores, especialmente en aspectos de seguridad.


